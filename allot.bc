define mcn(m, n) { 
    auto r, s, t, ti;
    r = 1;
    s = 1;
    ti = 1;
    for (t = m; t > m - n; --t) { r *= t; s *= ti++; }; 
    return r / s;
}

define logbinom(m, n, p) { 
    auto lc, ls, lf, z, r;
    z = scale;
    scale = 100;
    lc = l(mcn(m, n));
    ls = n * l(p);
    lf = (m - n) * l(1 - p);
    scale = z;
    return (lc + ls + lf) / 1;
}


/* should be normalized over n from 0 to m */
define binom(m, n, p) {
    return e(logbinom(m, n, p));
}



define max(a, b) { if (a < b) return b else return a }
define min(a, b) { if (a < b) return a else return b }

define flip(m, n1, n2, p) {
    auto i, nmin, flr1, flr2, s, fac, z;
    z = scale;
    scale = 100;
    flr1 = max(n2-n1,0);
    flr2 = max(n1-n2,0);
    nmin = min(m-n1-flr1, n1-flr2);
    s = 0;
    for (i = 0; i <= nmin; ++i) {
        /* print "logbinom(", m-n1, ", ", flr1+i, ", ", p, "), logbinom(", n1, ", ", flr2+i, ", ", p, ")\n"; */
        fac = logbinom(m-n1,flr1+i,p) + logbinom(n1,flr2+i,p);
        s += e(fac);
    }
    scale = z;
    return s / 1;
}


define allot(t, b) {
    auto i, s;
    s = 0;
    if (b == 1 || t == 0) { return 1; }
    for (i = 1; i <= b && i <= t; ++i) {
        s += allot(t - i, i) * mcn(b, i);
    }
    return s;
}
