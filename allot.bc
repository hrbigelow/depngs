/* M-choose-N */
define mcn(m, n) { 
    auto r, s, t, ti;
    r = 1;
    s = 1;
    ti = 1;
    for (t = m; t > m - n; --t) { r *= t; s *= ti++; }; 
    return r / s;
}


/* Computes mcn(m,n+1) / mcn(m,n).  That is, the change when
   choosing the n+1'th. */
define mcn_ratio(m,n) {
    return (m-n)/(n+1);
}


/* compute log of the binomial with m trials, n successes, and
   probability of success p */
define logbinom(m, n, p) { 
    auto lc, ls, lf, z, r;
    z = scale;
    scale = 100;
    lc = l(mcn(m, n));
    ls = n * l(p);
    lf = (m - n) * l(1 - p);
    scale = z;
    return (lc + ls + lf) / 1;
}


/* compute the probability of one family of coin configurations being
   converted to another family through the 'Flip()' process.  See
   notes.

   b: TTTTTTTTTTHTTTTTTTTTTTTTTTHTTTTTTT
   a: ttttttttttttttttttttthhhhhhhhhhhhh

   C(b,a,p,v) =
   mcn(t, H-v)    // # H->t transitions
   * mcn(h, h-v)  // # T->h transitions
   * p^(H + h-2v) // Total # flipped
   * (1-p)^(N - (H + h-2v))

   Parameters:
   n: total number of coins
   bh: number heads before
   ah: number heads after
   v: number of coins that are heads both before and after
   p: probability of inverting a coin

*/
define log_flip_prob(n, bh, ah, v, p) {
    auto log_prob, n_ht, n_th, n_flip, n_stay, bt, at;
    n_ht = bh - v;
    n_th = ah - v;
    n_flip = n_ht + n_th;
    n_stay = n - n_flip;
    at = n - ah;
    bt = n - bh;
    /* print \ */
    /*     "mcn(", at, ", ", n_ht, ") ", \ */
    /*     "* mcn(", ah, ", ", n_th, ") ", \ */
    /*     "* ", p, "^", n_flip, " ", \ */
    /*     "* ", 1-p, "^", n_stay, "\n"; */
    log_prob =                                   \
        l(mcn(at, n_ht))                         \
        + l(mcn(ah, n_th))                       \
        + n_flip * l(p)                          \
        + n_stay * l(1-p);
    return log_prob;
}



/* compute C(b,a,p,v) / C(b,a,p,v-1), where b is the 'before'
   configuration of coins, a is the 'after' configuration of coins, p
   is the probability of inverting a given coin, and v is the union of
   coins showing heads in both a and b.  H is number of heads in b. h
   is number of heads in a. N is total number of coins,

   C(b,a,p,v) / C(b,a,p,v-1) = p^-2 * (H-v+1)/(t-H+v) * (h-v+1)/v

*/
define flip_ratio(n, bh, ah, v, p) {
    auto at;
    at = n - ah;
    return p^-2 * (1-p)^2 / (mcn_ratio(at,bh-v) * mcn_ratio(ah,ah-v));
}


define manual_ratio(n, bh, ah, v, p) { 
    return e(log_flip_prob(n, bh, ah, v, p) - log_flip_prob(n, bh, ah, v - 1, p));
}



/* should be normalized over n from 0 to m */
define binom(m, n, p) {
    return e(logbinom(m, n, p));
}



define max(a, b) { if (a < b) return b else return a }
define min(a, b) { if (a < b) return a else return b }

define flip(m, n1, n2, p) {
    auto i, nmin, flr1, flr2, s, fac, z;
    z = scale;
    scale = 100;
    flr1 = max(n2-n1,0);
    flr2 = max(n1-n2,0);
    nmin = min(m-n1-flr1, n1-flr2);
    s = 0;
    for (i = 0; i <= nmin; ++i) {
        /* print "logbinom(", m-n1, ", ", flr1+i, ", ", p, "), logbinom(", n1, ", ", flr2+i, ", ", p, ")\n"; */
        fac = logbinom(m-n1,flr1+i,p) + logbinom(n1,flr2+i,p);
        s += e(fac);
    }
    scale = z;
    return s / 1;
}


define allot(t, b) {
    auto i, s;
    s = 0;
    if (b == 1 || t == 0) { return 1; }
    for (i = 1; i <= b && i <= t; ++i) {
        s += allot(t - i, i) * mcn(b, i);
    }
    return s;
}
